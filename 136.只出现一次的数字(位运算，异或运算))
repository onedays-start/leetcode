//位运算，即异或运算，根据异或运算的规律一个数和0异或为自身，和自身异或为0，且异或运算具有交换律和结合律，所以将数组的所有元素异或则得到只出现一次的元素（不用考虑原码，补码什么的
，因为反正都是按位异或，只要相同的数那个码都一样）
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int ret=0;  //初始为0是因为0和一个数异或等于自身
        for(auto i:nums){
            ret ^= i;  //相当于ret=ret^i; ^是异或运算符 
        }
        return ret;
    }
};
